"use strict"; var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })(); function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } var challengesData = [{ "name": "emojigraphy", "fancy": "Emoji cipher", "question": "emojigraphy.md", "init": "String.prototype.encrypt = function() {\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.encrypt()", "tests": [{ "word": "message", "expected": "😝😅😒😒😄😍😅" }] }, { "name": "caesar-encrypt", "fancy": "Caesar Encrypt", "question": "caesar-encrypt.md", "init": "String.prototype.encrypt = function(key) {\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.encrypt(${current.key})", "tests": [{ "word": "Hello", "key": 4, "expected": "LIPPS" }, { "word": "cryptools", "key": 2, "expected": "ETARVQQNU" }, { "word": "test", "key": 5, "expected": "YJXY" }] }, { "name": "rot13", "fancy": "ROT13", "question": "rot13.md", "init": "String.prototype.encrypt = function() {\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.encrypt()", "tests": [{ "word": "Hello", "expected": "URYYB" }, { "word": "cryptools", "expected": "PELCGBBYF" }, { "word": "test", "expected": "GRFG" }] }, { "name": "caesar-decrypt", "fancy": "Caesar Decrypt", "question": "caesar-decrypt.md", "init": "String.prototype.decrypt = function(key) {\n // to get the String you need to decrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.decrypt(${current.key})", "tests": [{ "word": "LIPPS", "key": 4, "expected": "HELLO" }, { "word": "ETARVQQNU", "key": 2, "expected": "CRYPTOOLS" }, { "word": "YJXY", "key": 5, "expected": "TEST" }] }, { "name": "railfence-encrypt", "fancy": "Rail Fence Encrypt", "question": "railfence-encrypt.md", "init": "String.prototype.encrypt = function(key) { // key is the number of rails\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.decrypt(${current.key})", "tests": [{ "word": "Hello World!", "key": 3, "expected": "Horel ol!lwd" }] }, { "name": "bitshift-encrypt", "fancy": "BitShift Cipher", "question": "bitshift-encrypt.md", "init": "String.prototype.encrypt = function(key) { // key is the number of rails\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.encrypt('${current.key}')", "tests": [{ "word": "Hello World!", "key": "key", "expected": "WzM3NDQyLDUyNDg4LDU1ODc0LDU2MDcyLDU3NDEwLDE3MTYwLDQ1MTIyLDU3NjA4LDU4OTQ2LDU2MDcyLDUxNzc4XQ==" }] }, { "name": "xor", "fancy": "XOR Cipher", "question": "xorcipher.md", "init": "String.prototype.encrypt = function(key) { // key is a number or an array\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.encrypt(${current.key})", "tests": [{ "word": "Hello World!", "key": 134, "expected": "Îãêêé¦Ñéôêâ§" }, { "word": "CrypTools", "key": 873, "expected": "̛̪̙̐̽̆̆̅̚" }] }, { "name": "rsa", "fancy": "RSA", "question": "rsa.md", "init": "function rsa() {\n return n // n is the answer\n}\n", "testCommand": "return rsa()", "tests": [{ "word": "rsa()", "expected": 399788195976 }] }, { "name": "b64", "fancy": "Base64", "question": "b64.md", "init": "String.prototype.decrypt = function() {\n // to get the String you need to encrypt, use 'this'\n}\n", "testCommand": "return '${current.word}'.decrypt()", "tests": [{ "word": "SGVsbG8gV29ybGQh", "expected": "Hello World!" }, { "word": "Q3J5cFRvb2xz", "expected": "CrypTools" }, { "word": "YmFzZQ==", "expected": "base" }] }]; var challenges = {}; var _iteratorNormalCompletion = true; var _didIteratorError = false; var _iteratorError = undefined; try { for (var _iterator = challengesData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) { var i = _step.value; challenges[i.name] = i; } } catch (err) { _didIteratorError = true; _iteratorError = err; } finally { try { if (!_iteratorNormalCompletion && _iterator["return"]) { _iterator["return"](); } } finally { if (_didIteratorError) { throw _iteratorError; } } } var Router = (function () { function Router() { _classCallCheck(this, Router); var hash = undefined; if (localStorage.getItem("CrypToolsLearn")) { hash = localStorage.getItem("CrypToolsLearn").substring(1); } else { hash = window.location.hash.substring(1); } if (hash == "") { this.page = challenges["emojigraphy"]; /* level 1 */ } else { this.page = challenges[hash]; } this.load(); } _createClass(Router, [{ key: "load", value: function load() { var question = document.querySelector(".questions"); var converter = new showdown.Converter({ extensions: ['github'] }); fetch("../challenges/" + this.page.question).then(function (data) { return data.text(); }).then(function (text) { question.innerHTML = converter.makeHtml(text); }); editor.insert(this.page.init); } }]); return Router; })(); var router = new Router(); var Test = (function () { function Test(data) { _classCallCheck(this, Test); this.data = data; var runEl = document.getElementById("run"); this.addEvents(runEl); } _createClass(Test, [{ key: "addEvents", value: function addEvents(el) { var _this = this; el.addEventListener("click", function (e) { _this.test(); }); } }, { key: "test", value: function test() { console.command("run tests"); var out = ""; var before = ""; for (var i = 0; i < this.data.tests.length; i++) { var current=this.data.tests[i]; var command=eval("`" + this.data.testCommand + "`"); var result=editor.run(command); var expected=current.expected; before += current.word + " -> " + result + "<br>"; if (result == expected) { out = out === false ? false : true; } else { out = false; } } if (out === true) { console.log("Congratulations 🎉! The code you've written passed the tests."); document.querySelector(".done").style.display = "flex"; setTimeout(function () { document.querySelector(".done").classList.add("active"); }, 1000); } else { console.log(before + "Argh 😤! You've failed! Try again..."); } } }]); return Test; })(); var test = new Test(router.page);