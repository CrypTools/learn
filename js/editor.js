"use strict"; var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })(); function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } var Editor = (function () { function Editor(el) { _classCallCheck(this, Editor); this.ed = el; } _createClass(Editor, [{ key: "value", value: function value() { return this.ed.getValue(); /* the code written in the editor */ } }, { key: "insert", value: function insert(text) { var doc = this.ed.getDoc(); var cursor = doc.getCursor(); doc.replaceRange(text, cursor); } }, { key: "run", value: function run(command) { var val = this.value(); var f = new Function(val + "\n" + command); /* safe eval() */ var out = undefined; try { out = f(); } catch (e) { out = e; } finally { return out; } } }]); return Editor; })(); var editorEl = CodeMirror(document.querySelector(".editor"), { mode: "javascript", theme: "monokai", lineNumbers: true, autoCloseTags: true, autoCloseBrackets: true, matchBrackets: true, indentUnit: 4, indentWithTabs: true, closeBrackets: true, viewportMargin: Infinity, extraKeys: { "Shift-Enter": function ShiftEnter(cm) { cm.setOption("fullScreen", !cm.getOption("fullScreen")); }, "Esc": function Esc(cm) { if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false); } } }); var editor = new Editor(editorEl);