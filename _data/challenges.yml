# name:           the name of the cipher (no space)
# fancy:          the fancy name
# question:       the question file
# init:           the default code to put in the editor
# testCommand:    how to execute the code. uses `` pattern. current will contain the test data.
# tests:          the test data


# Emoji Cipher - Introduction
- name:           emojigraphy
  fancy:          Emoji cipher
  question:       emojigraphy.md
  init:           >
    String.prototype.encrypt = function() {
        // to get the String you need to encrypt, use 'this'
    }
  testCommand:    return '${current.word}'.encrypt()
  tests:
      - word:     message
        expected: 😝😅😒😒😄😍😅

# Caesar Encrypt
- name:           caesar-encrypt
  fancy:          Caesar Encrypt
  question:       caesar-encrypt.md
  init:           >
    String.prototype.encrypt = function(key) {
        // to get the String you need to encrypt, use 'this'
    }
  testCommand:    return '${current.word}'.encrypt(${current.key})
  tests:
     - word:      Hello
       key:       4
       expected:  LIPPS

     - word:      cryptools
       key:       2
       expected:  ETARVQQNU
     - word:      test
       key:       5
       expected:  YJXY


# ROT13
- name:           rot13
  fancy:          ROT13
  question:       rot13.md
  init:           >
    String.prototype.encrypt = function() {
        // to get the String you need to encrypt, use 'this'
    }
  testCommand:    return '${current.word}'.encrypt()
  tests:
     - word:      Hello
       expected:  URYYB

     - word:      cryptools
       expected:  PELCGBBYF

     - word:      test
       expected:  GRFG


# Caesar Decrypt
- name:           caesar-decrypt
  fancy:          Caesar Decrypt
  question:       caesar-decrypt.md
  init:           >
    String.prototype.decrypt = function(key) {
        // to get the String you need to decrypt, use 'this'
    }
  testCommand:    return '${current.word}'.decrypt(${current.key})
  tests:
     - word:      LIPPS
       key:       4
       expected:  HELLO

     - word:      ETARVQQNU
       key:       2
       expected:  CRYPTOOLS
     - word:      YJXY
       key:       5
       expected:  TEST

# Railfence Encrypt
- name:           railfence-encrypt
  fancy:          Rail Fence Encrypt
  question:       railfence-encrypt.md
  init:           >
    String.prototype.encrypt = function(key) { // key is the number of rails
        // to get the String you need to encrypt, use 'this'
    }
  testCommand:    return '${current.word}'.decrypt(${current.key})
  tests:
      - word:     Hello World!
        key:      3
        expected: Horel ol!lwd

# BitShift Cipher
- name:           bitshift-encrypt
  fancy:          BitShift Cipher
  question:       bitshift-encrypt.md
  init:           >
    String.prototype.encrypt = function(key) { // key is the number of rails
        // to get the String you need to encrypt, use 'this'
    }
  testCommand:    return '${current.word}'.encrypt('${current.key}')
  tests:
     - word:      Hello World!
       key:       key
       expected:  WzM3NDQyLDUyNDg4LDU1ODc0LDU2MDcyLDU3NDEwLDE3MTYwLDQ1MTIyLDU3NjA4LDU4OTQ2LDU2MDcyLDUxNzc4XQ==

# XORCipher
- name:           xor
  fancy:          XOR Cipher
  question:       xorcipher.md
  init:           >
    String.prototype.encrypt = function(key) { // key is a number or an array
        // to get the String you need to encrypt, use 'this'
    }
  testCommand:    return '${current.word}'.encrypt(${current.key})
  tests:
     - word:      Hello World!
       key:       134
       expected:  Îãêêé¦Ñéôêâ§
     - word:      CrypTools
       key:       873
       expected:  ̛̪̙̐̽̆̆̅̚

# RSA
- name:           rsa
  fancy:          RSA
  question:       rsa.md
  init:           >
    function rsa() {
        return n // n is the answer
    }
  testCommand:    return rsa()
  tests:
     - word:      rsa()
       expected:  399788195976
